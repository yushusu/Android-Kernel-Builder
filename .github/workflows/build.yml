name: "Build Android Goldfish Kernel for M1 AVD"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v3

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build Goldfish Kernel for AVD"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: "goldfish_arm64_defconfig"  # 硬编码为 goldfish defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "✨ Create working dir"
        run: mkdir -p $kernelDir

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools

      - name: "📦 Install repo tool"
        run: |
          mkdir -p ~/.bin
          PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH

      - name: "🌟 Sync kernel source with repo"
        working-directory: ./${{ env.kernelDir }}
        run: |
          # 初始化并同步 goldfish 内核
          repo init -u https://android.googlesource.com/kernel/manifest -b ${{ env.kernelBranch }}
          repo sync -c -j$(nproc)
          
          # 切换到 goldfish 目录
          if [ -d "common" ]; then
            cd common
          elif [ -d "goldfish" ]; then
            cd goldfish
          fi
          # 尝试切换到 goldfish 特定分支
          git checkout ${{ env.kernelBranch }}-goldfish || git checkout ${{ env.kernelBranch }} || true

      - name: "💫 Get toolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo $toolchains_num
          for ((i=0;i<toolchains_num;i++)); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            git clone --recursive --branch $branch $repo $name --depth=1
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done

      - name: "😎 Set args"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          CC=$(echo $params | jq -r ".CC")
          KCFLAGS=$(echo $params | jq -r ".KCFLAGS")

          echo "ARCH=$ARCH" >> $GITHUB_ENV

          args="-j$(nproc --all)"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          if [ -n "$KCFLAGS" ]; then
            args="$args KCFLAGS=$KCFLAGS"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/common  # 或者 goldfish，根据实际目录
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Using defconfig: ${{ env.DEFCONFIG_NAME }}"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.kernelDir }}/common  # 或者 goldfish，根据实际目录
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${args}

      - name: "💙 Upload Image.gz"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: error
          retention-days: 7
